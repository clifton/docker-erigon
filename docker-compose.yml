version: '2.2'

x-erigon-service: &default-erigon-service
  image: thorax/erigon:v2.37.0
  user: 0:0
  volumes:
    - .data:/data
    - .jwtsecret:/jwtsecret
  restart: unless-stopped
  mem_swappiness: 0

x-lighthouse-service: &default-lighthouse-service
  image: sigp/lighthouse:latest-modern
  volumes:
    - .lighthouse:/root/.lighthouse
    - ./validator_keys:/root/validator_keys
    - .jwtsecret:/jwtsecret
  environment:
    - FEE_RECIPIENT="${FEE_RECIPIENT}"
    - BEACON_CHECKPOINT_URL="${BEACON_CHECKPOINT_URL}"
  restart: unless-stopped
  mem_swappiness: 0

services:

  erigon:
    <<: *default-erigon-service
    ports:
      - "30304:30304/tcp"
      - "30304:30304/udp"
    # for merge add --authrpc.addr=0.0.0.0 --authrpc.vhosts=*
    command: >-
      erigon
      --datadir=/data --port=30304
      --metrics --metrics.addr=0.0.0.0 --metrics.port=6060
      --private.api.addr=0.0.0.0:9090
      --authrpc.jwtsecret=/jwtsecret/jwt.hex
      --authrpc.vhosts="*"
      --authrpc.addr=0.0.0.0
      --externalcl
      --torrent.download.rate=300mb

  rpcdaemon:
    <<: *default-erigon-service
    # Use erigon's PID namespace. It's required to open Erigon's DB from
    # another process (RPCDaemon local-mode)
    pid: service:erigon
    ports:
      - "8545:8545"
    command: >-
      rpcdaemon
      --datadir=/data
      --private.api.addr=erigon:9090
      --txpool.api.addr=erigon:9090
      --http.addr=0.0.0.0 --http.vhosts="*" --http.corsdomain="*"
      --http.api=eth,erigon,web3,net,debug,trace,txpool --ws

  # https://lighthouse-book.sigmaprime.io/builders.html
  beacon:
    <<: *default-lighthouse-service
    restart: unless-stopped
    depends_on:
      - erigon
      - mev-boost
    ports:
      - "9009:9009/tcp"
      - "9009:9009/udp"
      - "5052:5052"
      - "5053:5053"
    command: >-
      lighthouse --network mainnet beacon
        --port 9009
        --staking --validator-monitor-auto
        --http --http-address 0.0.0.0 --http-port 5052 --http-allow-origin "*"
        --metrics --metrics-address 0.0.0.0 --metrics-port 5053
        --suggested-fee-recipient $FEE_RECIPIENT
        --execution-endpoint http://erigon:8551
        --execution-jwt /jwtsecret/jwt.hex
        --checkpoint-sync-url $BEACON_CHECKPOINT_URL
        --builder http://mev-boost:18550
        --prune-payloads false

  # https://lighthouse-book.sigmaprime.io/builders.html
  # add: --strict-fee-recipient --builder-proposals --suggested-fee-recipient
  # validator:
  #   <<: *default-lighthouse-service
  #   restart: unless-stopped
  #   depends_on:
  #     - mev-boost
  #     - beacon
  #     - erigon
  #   command:
  #     echo true

  # https://github.com/flashbots/mev-boost#usage
  mev-boost:
    image: flashbots/mev-boost:latest
    restart: unless-stopped
    ports:
      - "18550:18550"
    environment:
      - MEV_BOOST_RELAYS="${MEV_BOOST_RELAYS}"
    command: >-
      -addr 0.0.0.0:18550 -mainnet -relay-check -relays $MEV_BOOST_RELAYS


  # https://developer.offchainlabs.com/node-running/running-a-node
  arbitrum:
    image: offchainlabs/nitro-node:v2.0.7-10b845c
    restart: unless-stopped
    mem_swappiness: 0
    # state held in memory, needs time to save to disk
    stop_grace_period: 5m
    volumes:
      - .arbitrum:/home/user/.arbitrum
    depends_on:
      - erigon
    ports:
      - "8547:8547"
      - "8548:8548"
    command: >-
      --l1.url=http://rpcdaemon:8545 --l2.chain-id=42161
      --http.api=net,web3,eth,debug --http.corsdomain=*
      --http.addr=0.0.0.0 --http.vhosts=*
      --node.archive
      --init.url="https://snapshot.arbitrum.io/mainnet/nitro.tar"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    restart: always
    command: >-
      --log.level=warn --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles

  grafana:
    image: grafana/grafana
    ports:
      - "3030:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana:/var/lib/grafana
    restart: unless-stopped

volumes:
  prometheus:
  grafana:
